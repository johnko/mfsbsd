#!/bin/sh
# Copyright (c) 2014 John Ko

umask 077

: ${RELEASE:="10.0-RELEASE"}
: ${ARCH:="amd64"}
BASEJAIL="/usr/jails/basejail"
POUDIR="/poudriere"
LOCALNIC="lo1"
PRODIP="10.7.7"
LOCALIP="10.123.234"
TMPFILE=$( /usr/bin/mktemp -t jrole )
NIC=$( /usr/bin/netstat -nr | /usr/bin/egrep "default" | /usr/bin/awk '{ print $NF }' |\
	/usr/bin/head -1 )
if [ "x" = "x$NIC" ]; then
	echo "Can't determine default route network interface." ; exit 1
fi
PUBLICIP=$( /sbin/ifconfig "$NIC" | /usr/bin/egrep "inet" |\
	/usr/bin/egrep -v 'netmask 0xffffffff' |\
	/usr/bin/sed -e 's/broadcast.*//g' -e 's/netmask.*//g' |\
	/usr/bin/egrep -o "([0-9]{1,3}\.){3}[0-9]{1,3}" | /usr/bin/tr '\n' '~' |\
	/usr/bin/sed -e "s/~/$DELIM/g" -e 's/, *$//g' )
if [ "x" = "x$PUBLICIP" ]; then
	echo "Can't determine IP address." ; exit 1
fi
IP=$( echo "$PUBLICIP" | /usr/bin/cut -d. -f1-3 )
IPCOUNT=$( echo "$PUBLICIP" | /usr/bin/cut -d. -f4 )
if [ -e /server/csv/id ]; then
	CSV=$( /bin/cat /server/csv/id | /usr/bin/tr -d '\n' )
else
	CSV=''
fi

/usr/bin/touch /var/log/jrolebgstart.log

# ---------------------------------------------------------

# firewall redirection and NAT
jrolenat (){

	[ $# -lt 3 ] && echo "Usage: `basename $0` role jailname 'nic|ip'" && exit 1

	testforx /server/bin/pf-anchor-load

	local ip=$( echo "$3" | /usr/bin/awk -F'|' '{print $2}' )

	if [ -e /server/csv/ucarp ]; then
		local server=$( /bin/cat /server/csv/ucarp | /usr/bin/tr -d '\n' )
	else
		local server="$DHCP"
	fi

	/usr/bin/egrep "nat on $NIC from $LOCALIP" /server/savepf/jails.anchor \
	> /dev/null 2> /dev/null || /bin/cat >>/server/savepf/jails.anchor <<EOF
nat on $NIC from ${LOCALIP}.0/24 to any -> (${NIC})
EOF

	/server/bin/pf-anchor-load jails

	if [ "$1" = "dhcpd" ]; then
		echo
	elif [ "$1" = "pxe" ]; then

		local newip="${PRODIP}.${ip##*.}"

		/usr/bin/egrep "nat on $NIC from $ip" /server/savepf/jails.anchor \
		> /dev/null 2> /dev/null || /bin/cat >>/server/savepf/jails.anchor <<EOF
nat on $NIC from $newip to any -> $DHCP
rdr pass on $NIC proto udp from any to $DHCP port 69 -> $newip
rdr pass on $NIC proto udp from any to $DHCP port 124:65535 -> $newip
rdr pass on $NIC proto tcp from any to $server port 80 -> $newip
EOF

		/server/bin/pf-anchor-load jails

	else

		local newip="${PRODIP}.${ip##*.}"

		/usr/bin/egrep "nat on $NIC from $newip" /server/savepf/jails.anchor \
		> /dev/null 2> /dev/null || /bin/cat >>/server/savepf/jails.anchor <<EOF
nat on $NIC from $newip to any -> (${NIC})
EOF

	fi

}

# ---------------------------------------------------------

# Start jail in bg
jrolebgstart () {

	[ $# -lt 2 ] && echo "Usage: `basename $0` role jailname" && exit 1

	testforx /usr/local/bin/ezjail-admin

	local safejailname=$( echo -n "$2" | /usr/bin/tr -c '[:alnum:]' _ )

	test -e "/usr/jails/${2}/etc/pkg/FreeBSD.conf" \
	&& /bin/mv "/usr/jails/${2}/etc/pkg/FreeBSD.conf" \
	"/usr/jails/${2}/etc/pkg.FreeBSD.conf.bkp"

	echo -n "Installing pkg into jail..."

	test -e "/usr/jails/${2}/usr/local/sbin/pkg" \
	|| /usr/local/bin/ezjail-admin console \
	-e "/usr/local/sbin/pkg-static install -y pkg" "$2" \
	> /dev/null 2> /dev/null

	echo " done"

	echo -n "Installing LittleChef client... "

	/usr/local/bin/ezjail-admin console \
	-e "/server/bin/startlittlechefclient" "$2" \
	> /dev/null 2> /dev/null

	echo " done"

############################################
	if [ "$1" = "dhcpd" ]; then

		/usr/local/bin/ezjail-admin console -e /server/bin/startdhcpd "$2"

############################################
	elif [ "$1" = "pxe" ]; then

		if [ -e /server/csv/ucarp ]; then
			local server=$( /bin/cat /server/csv/ucarp | /usr/bin/tr -d '\n' )
		else
			local server="$DHCP"
		fi

		/usr/local/bin/ezjail-admin console \
		-e "/server/bin/start$1 $server" "$2"

		jroleproductionip $( /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "pxe" | /usr/bin/awk '{print $4}' )

############################################
	elif [ "$1" = "pkgng" -o "$1" = "freebsd-dist" -o "$1" = "littlechef" ]; then

		/usr/local/bin/ezjail-admin console -e "/server/bin/start$1" "$2"

############################################
	elif [ "$1" = "release" ]; then

		/usr/local/bin/ezjail-admin console -e "/server/bin/start$1" "$2"

		jrolelinkrelease

		/usr/local/bin/ezjail-admin list | /usr/bin/grep "mfsbsd" || jrolejails mfsbsd

############################################
	elif [ "$1" = "mfsbsd" ]; then

		jailbuildmfsbsd

############################################

	else

		echo "Not implemented: jrolebgstart $1 $2"

	fi
}

# ---------------------------------------------------------

jailbuildmfsbsd (){

		testforx /server/bin/r
		testforx /usr/local/sbin/pkg-static
		testforx /usr/local/bin/ezjail-admin

		# run buildports if enabled
		test -x /server/bin/buildports && /server/bin/buildports

#		local releaseroot=$( /usr/local/bin/ezjail-admin list \
#		| /usr/bin/grep release | /usr/bin/awk '{print $5}' )

		local distroot=$(   /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "freebsd-dist" | /usr/bin/awk '{print $5}' )

		local mfsbsdroot=$( /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "mfsbsd"       | /usr/bin/awk '{print $5}' )

		local mfsbsdjail=$( /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "mfsbsd"       | /usr/bin/awk '{print $4}' )

		local pkgngroot=$(  /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "pkgng"        | /usr/bin/awk '{print $5}' )

		/usr/bin/touch "${mfsbsdroot}/root/.hushlogin"

		# allow unlink
		test -d "${mfsbsdroot}/root/mfsbsd" \
		&& /usr/bin/find "${mfsbsdroot}/root/mfsbsd" \
		-type l -exec /bin/chflags -h nosunlink {} \;

		echo -n "Copying mfsbsd src..."

		/server/bin/r -ctp --delete \
		/server/root/mfsbsd/	\
		"${mfsbsdroot}/root/mfsbsd/" \
		> /dev/null 2> /dev/null \
		|| exit 1

		/server/bin/r -ctp --delete \
		/server/root/mfsbsd/	\
		"${mfsbsdroot}/root/mfsbsd/keys/all/server/root/mfsbsd/" \
		> /dev/null 2> /dev/null \
		|| exit 1

		echo " done"

		/bin/mkdir -p "${mfsbsdroot}/root/mfsbsd/packages/noauto"
		/bin/mkdir -p "${mfsbsdroot}/root/mfsbsd/pkginstall"
		/bin/mkdir -p "${mfsbsdroot}/root/mfsbsd/pkgdisk"

		echo -n "Fetching packages into mfsbsd..."

		/usr/local/bin/ezjail-admin console \
		-e '/usr/local/sbin/pkg-static clean -y -a -q' "$mfsbsdjail" \
		> /dev/null 2> /dev/null

		/usr/local/bin/ezjail-admin console \
		-e '/usr/local/sbin/pkg-static update -q' "$mfsbsdjail" \
		> /dev/null 2> /dev/null

		/usr/local/bin/ezjail-admin console \
		-e '/usr/local/sbin/pkg-static upgrade -y -q' "$mfsbsdjail" \
		> /dev/null 2> /dev/null

		for i in $( /usr/local/sbin/pkg-static info | /usr/bin/awk '{print $1}' \
		| /usr/bin/sed 's#-[[:digit:]]*\.*[[:digit:]]*\.*[[:digit:]]*\.*[[:digit:]]*\.*[[:digit:]]*\.*[[:digit:]]*_*[[:digit:]]*,*[[:digit:]]*$##' \
		| /usr/bin/tr '\n' ' ' ) ; do

			/usr/local/bin/ezjail-admin console \
			-e "/usr/local/sbin/pkg-static fetch -y -d $i" "$mfsbsdjail" \
			> /dev/null 2> /dev/null

#			/bin/cp -av \
#			"${pkgngroot}/server/www/pkgng/All/${i}*" \
#			"${mfsbsdroot}/root/mfsbsd/packages/"

		done

		/usr/bin/find "${mfsbsdroot}/var/cache/pkg" \
		-type f -name '*txz' \
		-exec /bin/cp -a {} "${mfsbsdroot}/root/mfsbsd/packages/" \;

		/usr/local/bin/ezjail-admin console \
		-e '/usr/local/sbin/pkg-static clean -y -a' "$mfsbsdjail" \
		> /dev/null 2> /dev/null

		for i in dnsmasq syslinux nginx isc-dhcp43-server rubygem-chef ; do

			/usr/local/bin/ezjail-admin console \
			-e "/usr/local/sbin/pkg-static fetch -y -d $i" "$mfsbsdjail" \
			> /dev/null 2> /dev/null

		done

		/usr/bin/find "${mfsbsdroot}/var/cache/pkg" -type f -name '*txz' \
		-exec  /bin/cp -a {} "${mfsbsdroot}/root/mfsbsd/packages/noauto/" \;

		for i in $( /usr/bin/find "${mfsbsdroot}/root/mfsbsd/packages/noauto/" \
		-type f ); do

			test -e "${mfsbsdroot}/root/mfsbsd/packages/${i##*/}" \
			&& /bin/rm "${mfsbsdroot}/root/mfsbsd/packages/noauto/${i##*/}"

		done

		/usr/local/bin/ezjail-admin console \
		-e '/usr/local/sbin/pkg-static clean -y -a' "$mfsbsdjail" \
		> /dev/null 2> /dev/null

		/usr/local/bin/ezjail-admin console \
		-e '/usr/local/sbin/pkg-static fetch -y -d pkg' "$mfsbsdjail" \
		> /dev/null 2> /dev/null

XPACKAGES="xf86-video-vesa xf86-video-fbdev xf86-input-mouse xf86-input-keyboard \
xineramaproto xinit xrdb xauth \
slim xfce xfce4-battery-plugin xfce4-bsdcpufreq-plugin xfce4-clipman-plugin \
xfce4-cpugraph-plugin xfce4-datetime-plugin xfce4-dict-plugin xfce4-diskperf-plugin \
xfce4-fsguard-plugin xfce4-genmon-plugin xfce4-minicmd-plugin xfce4-mount-plugin \
xfce4-netload-plugin xfce4-notification-daemon xfce4-print xfce4-quicklauncher-plugin \
xfce4-screenshooter-plugin xfce4-systemload-plugin xfce4-taskmanager xfce4-terminal \
xfce4-timer-plugin xfce4-volumed xfce4-weather-plugin xfce4-wm-themes xfce4-wmdock-plugin"

		for i in midori xf86-video-intel $XPACKAGES ; do

			/usr/local/bin/ezjail-admin console \
			-e "/usr/local/sbin/pkg-static fetch -y -d $i" "$mfsbsdjail" \
			> /dev/null 2> /dev/null

		done

		/usr/bin/find "${mfsbsdroot}/var/cache/pkg" -type f -name '*txz' \
		-exec  /bin/cp -a {} "${mfsbsdroot}/root/mfsbsd/pkgdisk/" \;

		/usr/local/bin/ezjail-admin console \
		-e '/usr/local/sbin/pkg-static clean -y -a' "$mfsbsdjail" \
		> /dev/null 2> /dev/null

		/usr/local/bin/ezjail-admin console \
		-e '/usr/local/sbin/pkg-static fetch -y -d pkg' "$mfsbsdjail" \
		> /dev/null 2> /dev/null

		/usr/bin/find "${mfsbsdroot}/var/cache/pkg" -type f -name '*txz' \
		-exec /bin/cp -a {} "${mfsbsdroot}/root/mfsbsd/pkginstall/" \;

		echo " done"

		echo -n "Copying freebsd-dist to mfsbsd jail..."

#		local releaseiso=$( /bin/ls -1tr \
#		"${releaseroot}/scratch/R/FreeBSD*${RELEASE}*${ARCH}*disc1.iso" \
#		| /usr/bin/head -1 )

		local distftp="${distroot}/server/www/freebsd-dist/10.0-RELEASE-amd64/"

#		/server/bin/mount_iso "$releaseiso" "${mfsbsdroot}/cdrom"

		/bin/mkdir -p "${mfsbsdroot}/cdrom/usr/freebsd-dist"

		/server/bin/r -ct --exclude '*.sig' \
		"$distftp" \
		"${mfsbsdroot}/cdrom/usr/freebsd-dist/" \
		> /dev/null 2> /dev/null \
		|| exit 1

		echo " done"

#		/bin/ls -1 /boot/kernel/ | /usr/bin/sed 's#.ko$##' \
#		| /usr/bin/sort -u | /usr/bin/tr '\n' ' '

		MFSMODULES="aac aacraid accf_data accf_dns accf_http acl_nfs4 \
		acl_posix1e acpi_asus acpi_asus_wmi acpi_dock acpi_fujitsu \
		acpi_hp acpi_ibm acpi_panasonic acpi_sony acpi_toshiba \
		acpi_video acpi_wmi aesni agp aha ahc ahc_eisa ahc_isa ahc_pci \
		ahci ahd aibs aio alias_cuseeme alias_dummy alias_ftp alias_irc \
		alias_nbt alias_pptp alias_skinny alias_smedia alpm alq amdpm \
		amdsbwd amdsmb amdtemp amr amr_cam amr_linux aout arcmsr asmc \
		ata ataacard ataacerlabs ataadaptec ataahci ataamd ataati \
		atacard atacenatek atacypress atacyrix atahighpoint ataintel \
		ataisa ataite atajmicron atamarvell atamicron atanational \
		atanetcell atanvidia atapci atapromise ataserverworks \
		atasiliconimage atasis atavia atp beastie_saver bktr bktr_mem \
		blank_saver bridgestp cam cardbus carp cbb cc_cdg cc_chd \
		cc_cubic cc_hd cc_htcp cc_vegas cd9660 cd9660_iconv ciss cmx \
		coretemp cpuctl cpufreq crypto cryptodev ctl cxgb_t3fw cyclic \
		daemon_saver dcons dcons_crom dpms dragon_saver drm drm2 dtio \
		dtmalloc dtnfscl dtnfsclient dtrace dtrace_test dtraceall \
		dummynet ehci esp exca ext2fs fade_saver fasttrap fbt fdc \
		fdescfs filemon fire_saver firewire firmware fuse geom_bde \
		geom_bsd geom_cache geom_ccd geom_concat geom_eli geom_fox \
		geom_gate geom_journal geom_label geom_linux_lvm geom_mbr \
		geom_md geom_mirror geom_mountver geom_multipath geom_nop \
		geom_part_apm geom_part_bsd geom_part_ebr geom_part_gpt \
		geom_part_ldm geom_part_mbr geom_part_pc98 geom_part_vtoc8 \
		geom_pc98 geom_raid geom_raid3 geom_sched geom_shsec geom_stripe \
		geom_sunlabel geom_uzip geom_vinum geom_virstor geom_vol_ffs \
		geom_zero green_saver gsched_rr h_ertt hifn hpt27xx hptiop hptmv \
		hptnr hptrr hv_ata_pci_disengage hv_netvsc hv_storvsc hv_utils \
		hv_vmbus hwpmc i915 i915kms ichsmb ichwd ida if_ae if_age if_alc \
		if_ale if_an if_ath if_ath_pci if_aue if_axe if_bce if_bfe \
		if_bge if_bridge if_bwi if_bwn if_bxe if_cas if_cdce if_cue \
		if_cxgb if_cxgbe if_dc if_de if_disc if_ed if_edsc if_ef if_em \
		if_en if_epair if_et if_faith if_fatm if_fwe if_fwip if_fxp \
		if_gem if_gif if_gre if_hatm if_hme if_ic if_igb if_ipheth \
		if_ipw if_iwi if_iwn if_ixgb if_ixgbe if_jme if_kue if_lagg \
		if_le if_lge if_lmc if_malo if_mos if_msk if_mwl if_mxge if_my \
		if_ndis if_nfe if_nge if_ntb if_nve if_nxge if_patm if_pcn \
		if_qlxgb if_qlxgbe if_qlxge if_ral if_re if_rl if_rsu if_rue \
		if_rum if_run if_sf if_sge if_sis if_sk if_smsc if_sn if_ste \
		if_stf if_stge if_tap if_ti if_tl if_tun if_tx if_txp if_uath \
		if_udav if_upgt if_ural if_urtw if_urtwn if_vge if_vlan if_vmx \
		if_vr if_vte if_vtnet if_vx if_wb if_wi if_wpi if_xl if_zyd iic \
		iicbb iicbus iicsmb iir intpm io ip6_mroute ip_mroute ipdivert \
		ipfw ipfw_nat ipmi ipmi_linux ips ipw_bss ipw_ibss ipw_monitor \
		isci iscsi iscsi_initiator isp isp_1040 isp_1040_it isp_1080 \
		isp_1080_it isp_12160 isp_12160_it isp_2100 isp_2200 isp_2300 \
		isp_2322 isp_2400 isp_2400_multi isp_2500 isp_2500_multi ispfw \
		iw_cxgb iw_cxgbe iwi_bss iwi_ibss iwi_monitor iwn1000fw \
		iwn2030fw iwn4965fw iwn5000fw iwn5150fw iwn6000fw iwn6000g2afw \
		iwn6000g2bfw iwn6050fw joy kbdmux kernel kgssapi kgssapi_krb5 \
		krpc krping ksyms libalias libiconv libmbpool libmchain lindev \
		linker.hints linprocfs linsysfs linux lockstat logo_saver lpbb \
		lpt mac_biba mac_bsdextended mac_ifoff mac_lomac mac_mls \
		mac_none mac_partition mac_portacl mac_seeotheruids mac_stub \
		mac_test mach64 mcd mem mfi mfi_linux mfip mga miibus mlx mly \
		mmc mmcsd mps mpt mqueuefs msdosfs msdosfs_iconv mvs mw88W8363fw \
		mxge_eth_z8e mxge_ethp_z8e mxge_rss_eth_z8e mxge_rss_ethp_z8e \
		ndis netgraph nfs_common nfscl nfsclient nfscommon nfsd nfslock \
		nfslockd nfsmb nfsserver nfssvc ng_UI ng_async ng_atm ng_atmllc \
		ng_bpf ng_bridge ng_car ng_ccatm ng_cisco ng_deflate ng_device \
		ng_echo ng_eiface ng_etf ng_ether ng_ether_echo ng_fec \
		ng_frame_relay ng_gif ng_gif_demux ng_hole ng_hub ng_iface \
		ng_ip_input ng_ipfw ng_ksocket ng_l2tp ng_lmi ng_mppc ng_nat \
		ng_netflow ng_one2many ng_patch ng_pipe ng_ppp ng_pppoe \
		ng_pptpgre ng_pred1 ng_rfc1490 ng_socket ng_source ng_split \
		ng_sppp ng_sscfu ng_sscop ng_tag ng_tcpmss ng_tee ng_tty ng_uni \
		ng_vjc ng_vlan ngatmbase nmdm ntb_hw nullfs nvd nvme nvram oce \
		ohci opensolaris padlock pccard pcf pf pflog pfsync plip ppbus \
		ppc ppi pps procfs profile prototype pseudofs pty puc r128 \
		radeon radeonkms radeonkmsfw_ARUBA_me radeonkmsfw_ARUBA_pfp \
		radeonkmsfw_ARUBA_rlc radeonkmsfw_BARTS_mc radeonkmsfw_BARTS_me \
		radeonkmsfw_BARTS_pfp radeonkmsfw_BTC_rlc radeonkmsfw_CAICOS_mc \
		radeonkmsfw_CAICOS_me radeonkmsfw_CAICOS_pfp \
		radeonkmsfw_CAYMAN_mc radeonkmsfw_CAYMAN_me \
		radeonkmsfw_CAYMAN_pfp radeonkmsfw_CAYMAN_rlc \
		radeonkmsfw_CEDAR_me radeonkmsfw_CEDAR_pfp radeonkmsfw_CEDAR_rlc \
		radeonkmsfw_CYPRESS_me radeonkmsfw_CYPRESS_pfp \
		radeonkmsfw_CYPRESS_rlc radeonkmsfw_JUNIPER_me \
		radeonkmsfw_JUNIPER_pfp radeonkmsfw_JUNIPER_rlc \
		radeonkmsfw_PALM_me radeonkmsfw_PALM_pfp radeonkmsfw_PITCAIRN_ce \
		radeonkmsfw_PITCAIRN_mc radeonkmsfw_PITCAIRN_me \
		radeonkmsfw_PITCAIRN_pfp radeonkmsfw_PITCAIRN_rlc \
		radeonkmsfw_R100_cp radeonkmsfw_R200_cp radeonkmsfw_R300_cp \
		radeonkmsfw_R420_cp radeonkmsfw_R520_cp radeonkmsfw_R600_me \
		radeonkmsfw_R600_pfp radeonkmsfw_R600_rlc radeonkmsfw_R700_rlc \
		radeonkmsfw_REDWOOD_me radeonkmsfw_REDWOOD_pfp \
		radeonkmsfw_REDWOOD_rlc radeonkmsfw_RS600_cp \
		radeonkmsfw_RS690_cp radeonkmsfw_RS780_me radeonkmsfw_RS780_pfp \
		radeonkmsfw_RV610_me radeonkmsfw_RV610_pfp radeonkmsfw_RV620_me \
		radeonkmsfw_RV620_pfp radeonkmsfw_RV630_me radeonkmsfw_RV630_pfp \
		radeonkmsfw_RV635_me radeonkmsfw_RV635_pfp radeonkmsfw_RV670_me \
		radeonkmsfw_RV670_pfp radeonkmsfw_RV710_me radeonkmsfw_RV710_pfp \
		radeonkmsfw_RV730_me radeonkmsfw_RV730_pfp radeonkmsfw_RV770_me \
		radeonkmsfw_RV770_pfp radeonkmsfw_SUMO2_me radeonkmsfw_SUMO2_pfp \
		radeonkmsfw_SUMO_me radeonkmsfw_SUMO_pfp radeonkmsfw_SUMO_rlc \
		radeonkmsfw_TAHITI_ce radeonkmsfw_TAHITI_mc \
		radeonkmsfw_TAHITI_me radeonkmsfw_TAHITI_pfp \
		radeonkmsfw_TAHITI_rlc radeonkmsfw_TURKS_mc radeonkmsfw_TURKS_me \
		radeonkmsfw_TURKS_pfp radeonkmsfw_VERDE_ce radeonkmsfw_VERDE_mc \
		radeonkmsfw_VERDE_me radeonkmsfw_VERDE_pfp radeonkmsfw_VERDE_rlc \
		rain_saver random rc4 reiserfs rsu-rtl8712fw rt2561fw rt2561sfw \
		rt2661fw rt2860fw runfw s3 safe savage sbp sbp_targ scc scd \
		scsi_low sdhci sdhci_pci sdt sem send sfxge siba_bwn siftr siis \
		sis smb smbfs smbus snake_saver snd_ad1816 snd_als4000 \
		snd_atiixp snd_cmi snd_cs4281 snd_csa snd_driver snd_ds1 \
		snd_emu10k1 snd_emu10kx snd_envy24 snd_envy24ht snd_es137x \
		snd_ess snd_fm801 snd_hda snd_hdspe snd_ich snd_maestro \
		snd_maestro3 snd_mss snd_neomagic snd_sb16 snd_sb8 snd_sbc \
		snd_solo snd_spicds snd_t4dwave snd_uaudio snd_via8233 \
		snd_via82c686 snd_vibes snp sound speaker splash_bmp splash_pcx \
		splash_txt sppp star_saver sym systrace systrace_freebsd32 \
		systrace_linux32 sysvmsg sysvsem sysvshm t3_tom t4_tom t4fw_cfg \
		t5fw_cfg tdfx tmpfs toecore tpm trm twa twe tws u3g uark uart \
		ubsa ubsec ubser uchcom ucom ucycom udbp udf udf_iconv uep \
		uether ufm ufoma ufs uftdi ugensa uhci uhid uhso uipaq ukbd ulpt \
		umass umcs umct umodem umoscom ums unionfs uplcom urio \
		urtwn-rtl8192cfwT urtwn-rtl8192cfwU usb usb_quirk usb_template \
		usfs usie uslcom utopia uvisor uvscom vesa via viapm viawd \
		virtio virtio_balloon virtio_blk virtio_pci virtio_scsi vkbd vmm \
		vpo vxge warp_saver wbwd wlan wlan_acl wlan_amrr wlan_ccmp \
		wlan_rssadapt wlan_tkip wlan_wep wlan_xauth wpifw x86bios xhci \
		zfs zlib"

		/usr/local/bin/ezjail-admin console "$mfsbsdjail" <<EOF
cd ~/mfsbsd && chmod a+x tools/doFS.sh && chmod a+x build.sh \
&& ./build.sh nox all $CSV "$MFSMODULES"
EOF

		if [ ! -e "${mfsbsdroot}/root/mfsbsd/NOX-${RELEASE}-${ARCH}.iso" ]; then

			echo "ERROR 404: ${mfsbsdroot}/root/mfsbsd/NOX-${RELEASE}-${ARCH}.iso"
			exit 1

		fi

		jrolelinkmfsbsd

		cd "${mfsbsdroot}/root/mfsbsd"

		if [ -e "NOX-${RELEASE}-${ARCH}.iso" ]; then

			local DOFSSIZE=$(( `/bin/ls -l NOX-${RELEASE}-${ARCH}.iso \
			| /usr/bin/awk '{print $5}'` / 450 ))

			if [ -n "$DOFSSIZE" ]; then

				/usr/bin/make encimage \
				RELEASE="$RELEASE"  ARCH="$ARCH" \
				IMAGE_PREFIX=NOX \
				MFSMODULES="$MFSMODULES" \
				MFSROOT_MAXSIZE=999m \
				DOFSSIZE="$DOFSSIZE" \
				KEYCFG="mfsbsdonly all $CSV" \
				PKGNG=1 \
				SE=1 || exit 1

			fi

			cd -

			jrolelinkmfsbsd

		fi

		#/sbin/umount ${mfsbsdroot}/cdrom

		/usr/local/bin/ezjail-admin onestop		$( /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "pxe" | /usr/bin/awk '{print $4}' )

		/usr/local/bin/ezjail-admin onestart	$( /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "pxe" | /usr/bin/awk '{print $4}' )

		jrolebgstart "pxe" $( /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "pxe" | /usr/bin/awk '{print $4}' )

}

# ---------------------------------------------------------

# Creat role, but don't start
jrolecreate (){

	[ $# -lt 3 ] && echo "Usage: `basename $0` role jailname 'nic|ip'" && exit 1

	testforx /usr/local/bin/ezjail-admin

	local safejailname=$( echo -n "$2" | /usr/bin/tr -c '[:alnum:]' _ )

	jrolesetupbasejail

	jrolesetupflavours "$1"

	jrolejailcreate "$1" "$2" "$3"

############################################
	if [ "$1" = "dhcpd" ]; then

		/usr/bin/egrep "jrolecreate" "/usr/local/etc/ezjail/$safejailname" \
		> /dev/null 2> /dev/null \
		|| /bin/cat >> "/usr/local/etc/ezjail/$safejailname" <<EOF
# Added by jrolecreate
export jail_${safejailname}_fdescfs_enable="NO"
export jail_${safejailname}_devfs_ruleset="5"
export jail_${safejailname}_parameters="allow.raw_sockets=1"
# End of addition
EOF

############################################
	elif [ "$1" = "pxe" -o "$1" = "pkgng" -o "$1" = "freebsd-dist" -o "$1" = "littlechef" ]; then

		/usr/bin/egrep "jrolecreate" "/usr/local/etc/ezjail/$safejailname" \
		> /dev/null 2> /dev/null \
		|| /bin/cat >> "/usr/local/etc/ezjail/$safejailname" <<EOF
# Added by jrolecreate
export jail_${safejailname}_fdescfs_enable="NO"
# End of addition
EOF

############################################
	elif [ "$1" = "pgsql" ]; then

		/usr/bin/egrep "jrolecreate" "/usr/local/etc/ezjail/$safejailname" \
		> /dev/null 2> /dev/null \
		|| /bin/cat >> "/usr/local/etc/ezjail/$safejailname" <<EOF
# Added by jrolecreate
export jail_${safejailname}_fdescfs_enable="NO"
export jail_${safejailname}_parameters="allow.sysvipc"
# End of addition
EOF

############################################
	elif [ "$1" = "release" ]; then

		/usr/bin/egrep "jrolecreate" "/usr/local/etc/ezjail/$safejailname" \
		> /dev/null 2> /dev/null \
		|| /bin/cat >> "/usr/local/etc/ezjail/$safejailname" <<EOF
# Added by jrolecreate
export jail_${safejailname}_fdescfs_enable="NO"
export jail_${safejailname}_parameters="allow.chflags allow.mount allow.mount.devfs enforce_statfs=1"
# End of addition
EOF

############################################
	elif [ "$1" = "mfsbsd" ]; then

		/usr/bin/egrep "jrolecreate" "/usr/local/etc/ezjail/$safejailname" \
		> /dev/null 2> /dev/null \
		|| /bin/cat >> "/usr/local/etc/ezjail/$safejailname" <<EOF
# Added by jrolecreate
export jail_${safejailname}_fdescfs_enable="NO"
export jail_${safejailname}_devfs_ruleset="7"
export jail_${safejailname}_parameters="allow.chflags allow.mount allow.mount.devfs enforce_statfs=1"
# End of addition
EOF

############################################
	else

		echo "Not implemented: jrolecreate $1"

		/usr/bin/egrep "jrolecreate" "/usr/local/etc/ezjail/$safejailname" \
		> /dev/null 2> /dev/null \
		|| /bin/cat >> "/usr/local/etc/ezjail/$safejailname" <<EOF
# Added by jrolecreate
export jail_${safejailname}_fdescfs_enable="NO"
# End of addition
EOF

	fi

	/usr/local/bin/ezjail-admin onestart "$2"

}

# ---------------------------------------------------------

# Setup the jail flavours
jrolesetupflavours (){

	[ $# -lt 1 ] && echo "Usage: `basename $0` role" && exit 1

	local MNT="/usr/jails/flavours/$1"

	if [ ! -e "$MNT" ]; then

		/usr/bin/install -d -m 755 "$MNT"

#####		ETC			#####

		/usr/bin/install -d -m 755 "${MNT}/etc"
		/usr/bin/install -d -m 755 "${MNT}/etc/rc.d"
		/usr/bin/install -d -m 700 "${MNT}/etc/ssh"
		/usr/bin/install -d -m 755 "${MNT}/usr/local/sbin"
		/usr/bin/install -d -m 755 "${MNT}/usr/local/etc/pkg/repos"

		/usr/bin/install    -m 644 \
		"/etc/resolv.conf" \
		"${MNT}/etc/resolv.conf"

		for fil in make.conf periodic.conf rc.conf ; do

			/usr/bin/install    -m 644 \
			"/usr/jails/flavours/example/etc/$fil" \
			"${MNT}/etc/$fil"

		done

		jrolesetuprc "$MNT"

		for fil in jcron jsshdnohostname ; do

			/usr/bin/install    -m 755 \
			"/etc/rc.d/$fil" \
			"${MNT}/etc/rc.d/$fil"

		done

		/bin/cat /etc/ssh/sshd_config > "${MNT}/etc/ssh/sshd_config"

		/bin/chmod 644 "${MNT}/etc/ssh/sshd_config"

		/usr/bin/sed -i .bkp \
		's/ListenAddress.*//g' \
		"${MNT}/etc/ssh/sshd_config"

		/usr/bin/install -d -m 755 "${MNT}/usr"

		if [ ! -e "${MNT}/usr/local/sbin/pkg-static" ]; then

			/usr/bin/install    -m 755 \
			"/usr/local/sbin/pkg-static" \
			"${MNT}/usr/local/sbin/pkg-static"

		fi

		/bin/cat /usr/local/etc/pkg/repos/myrepo.conf \
		> "${MNT}/usr/local/etc/pkg/repos/myrepo.conf"

		/bin/chmod 644 "${MNT}/usr/local/etc/pkg/repos/myrepo.conf"

#####		SERVER		#####

		/usr/bin/install -d -m 755 "${MNT}/server"
		/usr/bin/install -d -m 700 "${MNT}/server/bin"
		/usr/bin/install -d -m 700 "${MNT}/server/pkg"

		/usr/bin/install    -m 644 \
		"/server/pkg/key.pub" \
		"${MNT}/server/pkg/key.pub"

		for fil in /server/bin/* ; do

			/usr/bin/install    -m 700 \
			"$fil" \
			"${MNT}$fil"

		done

##### 		ROOT		#####

		/usr/bin/install -d -m 755 "${MNT}/root"
		/usr/bin/install -d -m 700 "${MNT}/root/.ssh"

		for dir in .ssh .vim .vim/autoload .vim/syntax .vim/colors .vim/swaps .vim/undo \
		.vim/backups .rtorrent.session ; do

			/usr/bin/install -d -m 700 "${MNT}/root/$dir"

		done

		for fil in .csh_aliases .cshrc .curlrc .extra .functions .gen.cfg .gitconfig \
		.gitignore .inputrc .mbsyncrc .rtorrent.rc .screenrc .vim/autoload/togglebg.vim \
		.vim/syntax/json.vim .vim/colors/railscat.vim .vim/colors/molokai.vim \
		.vim/colors/solarized.vim .vimrc .wgetrc ; do

			test -e "/server/root/$fil" \
			&& /usr/bin/install    -m 600 \
			"/server/root/$fil" \
			"${MNT}/root/$fil"

		done

		/bin/cat /root/.ssh/authorized_keys > "${MNT}/root/.ssh/authorized_keys"

		/bin/chmod 600 "${MNT}/root/.ssh/authorized_keys"

#####		SPECIFIC	#####

		if [ "$1" = "dhcpd" ]; then

			jrolesetupservice "dhcpd"					"$MNT"

		elif [ "$1" = "pxe" ]; then

			jrolesetupservice "nginx"					"$MNT"
			jrolesetupservice "pxe"						"$MNT"

		elif [ "$1" = "pkgng" ]; then

			jrolesetupservice "nginx"					"$MNT"
			jrolesetupservice "pkgng"					"$MNT"

		elif [ "$1" = "freebsd-dist" ]; then

			jrolesetupservice "nginx"					"$MNT"
			jrolesetupservice "freebsd-dist"	"$MNT"

		elif [ "$1" = "release" -o "$1" = "mfsbsd" -o "$1" = "littlechef" ]; then

			jrolesetupservice "$1" 						"$MNT"

		else

			echo "Not implemented: jrolesetupflavours $1"

		fi

	fi

}

# ---------------------------------------------------------

# Setup service
jrolesetupservice (){

	[ $# -lt 2 ] && echo "Usage: `basename $0` service mount" && exit 1

	if [ "$1" = "dhcpd" ]; then

		/usr/bin/install -d -m 700 "${2}/server/csv/dhcpd"
		/usr/bin/install -d -m 755 "${2}/server/dhcpd"

		for fil in /server/csv/dhcpd/* ; do

			/usr/bin/install    -m 600 \
			"$fil" \
			"${2}$fil"

		done

		for fil in jcsvdhcpd ; do

			/usr/bin/install    -m 755 \
			"/server/rc.d/$fil" \
			"${2}/etc/rc.d/$fil" || exit 1

		done

	elif [ "$1" = "pxe" ]; then

		/usr/bin/install -d -m 755 "${2}/server/nginx/sites-available"
		/usr/bin/install -d -m 700 "${2}/server/csv/dhcpd"

		/usr/bin/install    -m 644 \
		"/server/nginx/sites-available/pxe.conf" \
		"${2}/server/nginx/sites-available/pxe.conf" || exit 1

		for fil in /server/csv/dhcpd/* ; do

			/usr/bin/install    -m 600 \
			"$fil" \
			"${2}$fil"

		done

		/usr/bin/install -d -m 755 "${2}/server/dnsmasq/sites-available"
		/usr/bin/install -d -m 755 "${2}/server/tftp"

		/usr/bin/install    -m 644 \
		"/server/dnsmasq/dnsmasq.conf" \
		"${2}/server/dnsmasq/dnsmasq.conf" || exit 1

		/usr/bin/install    -m 644 \
		"/server/dnsmasq/sites-available/pxe.conf" \
		"${2}/server/dnsmasq/sites-available/pxe.conf" || exit 1

		/usr/bin/install    -m 644 \
		"/server/tftp/pxelinux.cfg.menutemplate"\
		"${2}/server/tftp/pxelinux.cfg.menutemplate" || exit 1

		for fil in jcsvpxelinuxcfg ; do

			/usr/bin/install    -m 755 \
			"/server/rc.d/$fil" \
			"${2}/etc/rc.d/$fil" || exit 1

		done

	elif [ "$1" = "pkgng" ]; then

		/usr/bin/install -d -m 755 "${2}/server/nginx/sites-available"
		/usr/bin/install -d -m 700 "${2}/server/www"
		/usr/bin/install -d -m 700 "${2}/server/www/pkgng"

		/usr/bin/install    -m 644 \
		"/server/nginx/sites-available/pkgng.conf"\
		"${2}/server/nginx/sites-available/pkgng.conf" || exit 1

	elif [ "$1" = "freebsd-dist" ]; then

		/usr/bin/install -d -m 755 "${2}/server/nginx/sites-available"
		/usr/bin/install -d -m 700 "${2}/server/www"
		/usr/bin/install -d -m 700 "${2}/server/www/freebsd-dist"
		/usr/bin/install -d -m 700 "${2}/server/www/freebsd-dist/${RELEASE}-${ARCH}"
		/usr/bin/install -d -m 700 "${2}/server/www/mfsbsd"
		/usr/bin/install -d -m 700 "${2}/server/www/mfsbsd/${RELEASE}-${ARCH}"

		/usr/bin/install    -m 644 \
		"/server/nginx/sites-available/freebsd-dist.conf" \
		"${2}/server/nginx/sites-available/freebsd-dist.conf" || exit 1

	elif [ "$1" = "nginx" ]; then

		/usr/bin/install -d -m 755 "${2}/server/nginx"
		/usr/bin/install -d -m 755 "${2}/server/nginx/global"
		/usr/bin/install -d -m 755 "${2}/server/nginx/sites-available"
		/usr/bin/install -d -m 755 "${2}/server/nginx/sites-enabled"
		/usr/bin/install -d -m 755 "${2}/server/www"

		/usr/bin/install    -m 644 \
		"/server/nginx/nginx.conf" \
		"${2}/server/nginx/nginx.conf" || exit 1

		/usr/bin/install    -m 644 \
		"/server/nginx/sites-available/wordpress.conf" \
		"${2}/server/nginx/sites-available/wordpress.conf" || exit 1

		for fil in /server/nginx/global/* ; do

			/usr/bin/install    -m 644 \
			"$fil" \
			"${2}$fil"

		done

	elif [ "$1" = "mfsbsd" -o "$1" = "littlechef" ]; then

		echo

	elif [ "$1" = "release" ]; then

		jrolelinksrc "$2"

	else

		echo "Not implemented: jrolesetupservice $1"

	fi

}

# ---------------------------------------------------------

# Create jail if not exist
jrolejailcreate (){

	[ $# -lt 3 ] && echo "Usage: `basename $0` role jailname 'nic|ip'" && exit 1

	testforx /usr/local/bin/ezjail-admin

	local ip=$( echo "$3" | /usr/bin/awk -F'|' '{print $2}' )

	local safejailname=$( echo -n "$2" | /usr/bin/tr -c '[:alnum:]' _ )

	if ! /usr/local/bin/ezjail-admin list | /usr/bin/grep "$2" > /dev/null 2> /dev/null ; then
		/usr/local/bin/ezjail-admin create -f "$1" "$2" "$3"
	fi

	/usr/bin/egrep "fstab" "/usr/local/etc/ezjail/$safejailname" \
	> /dev/null 2> /dev/null \
	|| /bin/cat >> "/usr/local/etc/ezjail/$safejailname" <<EOF
export jail_${safejailname}_fstab="/usr/local/etc/ezjail/fstab.$safejailname"
EOF

	# Fix some jail permissions
	local FIXMNT="/usr/jails/$2"
	/bin/chmod -h 755 "${FIXMNT}/bin"
	/bin/chmod -h 755 "${FIXMNT}/boot"
	/bin/chmod -h 755 "${FIXMNT}/lib"
	/bin/chmod -h 755 "${FIXMNT}/libexec"
	/bin/chmod -h 755 "${FIXMNT}/rescue"
	/bin/chmod -h 755 "${FIXMNT}/sbin"
	/bin/chmod -h 755 "${FIXMNT}/sys"
	/bin/chmod -h 755 "${FIXMNT}/usr/bin"
	/bin/chmod -h 755 "${FIXMNT}/usr/include"
	/bin/chmod -h 755 "${FIXMNT}/usr/lib"
	/bin/chmod -h 755 "${FIXMNT}/usr/lib32"
	/bin/chmod -h 755 "${FIXMNT}/usr/libdata"
	/bin/chmod -h 755 "${FIXMNT}/usr/libexec"
	/bin/chmod -h 755 "${FIXMNT}/usr/ports"
	/bin/chmod -h 755 "${FIXMNT}/usr/sbin"
	/bin/chmod -h 755 "${FIXMNT}/usr/share"
	/bin/chmod -h 755 "${FIXMNT}/usr/src"
	/bin/cat > "${FIXMNT}/etc/hosts" <<EOF
$ip localhost localhost.my.domain $2
EOF

}

# ---------------------------------------------------------

# Setup the host to only listen on real ip (via startezjail)
jrolesetuphost () {

	testforx /server/bin/startezjail

	# Run startezjail
	/server/bin/startezjail

	# Set devfs and disable ezjail for persistence after reboot
	# (we onestart ezjail during rc.d/jezjail)
	/usr/sbin/sysrc -f /etc/rc.conf ezjail_enable="NO"
	/usr/sbin/sysrc -f /etc/rc.conf devfs_load_rulesets="YES"

	# Set gateway for persistence after reboot
	/usr/sbin/sysrc -f /etc/rc.conf gateway_enable="YES"
	/usr/sbin/sysrc -f /etc/rc.conf ipv6_gateway_enable="YES"

	# Activate sysctl network forwarding
	/sbin/sysctl net.inet.ip.forwarding=1 > /dev/null 2> /dev/null
	/sbin/sysctl net.inet.ip.fastforwarding=1 > /dev/null 2> /dev/null
	/sbin/sysctl net.inet6.ip6.forwarding=1 > /dev/null 2> /dev/null

	# Set sysctl for persistence after reboot
	/bin/chflags noschg /etc/sysctl.conf

	/usr/bin/grep "net.inet.ip.forwarding=1" /etc/sysctl.conf \
	> /dev/null 2> /dev/null \
	|| echo "net.inet.ip.forwarding=1" >> /etc/sysctl.conf

	/usr/bin/grep "net.inet.ip.fastforwarding=1" /etc/sysctl.conf \
	> /dev/null 2> /dev/null \
	|| echo "net.inet.ip.fastforwarding=1" >> /etc/sysctl.conf

	/usr/bin/grep "net.inet6.ip6.forwarding=1" /etc/sysctl.conf \
	> /dev/null 2> /dev/null \
	|| echo "net.inet6.ip6.forwarding=1" >> /etc/sysctl.conf

	/usr/bin/grep "net.link.tap.user_open=1" /etc/sysctl.conf \
	> /dev/null 2> /dev/null \
	|| echo "net.link.tap.user_open=1" >> /etc/sysctl.conf

	/usr/bin/grep "net.link.tap.up_on_open=1" /etc/sysctl.conf \
	> /dev/null 2> /dev/null \
	|| echo "net.link.tap.up_on_open=1" >> /etc/sysctl.conf

	/bin/chflags schg /etc/sysctl.conf

}

# ---------------------------------------------------------

# Setup the basejail with ezjail-admin
jrolesetupbasejail () {

	testforx /usr/local/bin/ezjail-admin

	# Make sure we ran jrolesetuphost
	jrolesetuphost

	# Create the /usr/local/etc/ezjail folder
	/usr/bin/install -d -m 755 /usr/local/etc/ezjail

	# If basejail folder doesn't exist, create it
	if [ ! -d /usr/jails/basejail ]; then

		# If we have an iso
		if [ -e "~/FreeBSD-${RELEASE}-${ARCH}-disc1.iso" ]; then

			testforx /server/bin/mount_iso

			# Mount iso
			test -x /server/bin/mount_iso \
			&& /server/bin/mount_iso "~/FreeBSD-${RELEASE}-${ARCH}-disc1.iso" /cdrom

			# port?
			#/usr/local/bin/ezjail-admin install -s -p -h file:///cdrom/usr/freebsd-dist
			# no port
			# no -s for source since we have a svn in data/distro/releng10
			# Install basejail from path /cdrom/usr/freebsd-dist
			test -d /cdrom/usr/freebsd-dist \
			&& /usr/local/bin/ezjail-admin install -h file:///cdrom/usr/freebsd-dist

			# Clean up
			/sbin/umount /cdrom 2> /dev/null
			for md in $( /sbin/mdconfig -lv \
			|	/usr/bin/grep "/root/FreeBSD-${RELEASE}-${ARCH}-disc1.iso" \
			| /usr/bin/awk '{print $1}' ); do

				/sbin/mdconfig -d -u "$md"

			done

		# If no iso
		else
			# Test 10.7.7.4
			if /usr/bin/fetch -T 10 -o /dev/null "http://${PRODIP}.4/freebsd-dist/10.0-RELEASE/base.txz" ; then
				# no -s for source since we have a svn in data/distro/releng10
				# Install basejail from 10.7.7.4
				/usr/local/bin/ezjail-admin install \
				-h "http://${PRODIP}.4/freebsd-dist" -r "$RELEASE"
			fi
		fi

	fi

	# If basejail still missing
	if [ ! -d /usr/jails/basejail ]; then
		# last try with /var/backups
		/usr/local/bin/ezjail-admin install \
		-h "file:///var/backups/${RELEASE}-${ARCH}"
	fi

	# If basejail still missing
	if [ ! -d /usr/jails/basejail ]; then
		echo "Error: base jail does not exist." ; exit 1
	fi

	# Reset some permissions for basejail
	/bin/chmod 755 /usr/jails/basejail
	/bin/chmod 755 /usr/jails/basejail/usr

	if [ "yes" = "$continueyesno" -o "YES" = "$continueyesno" ]; then
		#update if using standard
		/usr/local/bin/ezjail-admin update -u
	fi

	# New Freebsd 10 uses these options
	/usr/sbin/sysrc -f /usr/jails/flavours/example/etc/periodic.conf \
	security_status_ipfwlimit_enable="NO"

	/usr/sbin/sysrc -f /usr/jails/flavours/example/etc/periodic.conf \
	security_status_ipfwdenied_enable="NO"

}

# ---------------------------------------------------------

# Set up a jail/flavour rc.conf
jrolesetuprc () {

	[ $# -lt 1 ] && echo "Usage: `basename $0` mountpoint" && exit 1

	if [ -d "$1" ]; then

	##### Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" dumpdev="NO"
	##### ZFS
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" zfs_enable="YES"
	##### audit events, maybe for file sync
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" auditd_enable="YES"
	##### SSH
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" sshd_enable="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" sshd_rsa1_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" sshd_rsa_enable="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" sshd_dsa_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" sshd_ecdsa_enable="YES"
	##### Cron
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" cron_enable="YES"
	##### Sysylogs
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" syslogd_enable="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" syslogd_flags="-ss"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" newsyslog_enable="YES"
	##### Mail, Groupware
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" sendmail_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" sendmail_submit_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" sendmail_outbound_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" sendmail_msp_queue_enable="NO"
##	/usr/sbin/sysrc -f "${1}/etc/rc.conf" postfix_enable="YES"
##	/usr/sbin/sysrc -f "${1}/etc/rc.conf" postfix_pidfile="/var/run/master.pid"
##	/usr/sbin/sysrc -f "${1}/etc/rc.conf" postfix_procname="/usr/local/libexec/postfix/master"
##	/usr/sbin/sysrc -f "${1}/etc/rc.conf" postfix_flags=""
	##### Jails prevent shared memory
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" rpcbind_enable="NO"
	##### Virt drivers
	# DO NOT REMOVE LOADING OF VIRTIO DRIVERS BELOW
	# YOUR SYSTEM WON'T BE ABLE TO BOOT WITHOUT THEM
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" virtio_load="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" virtio_pci_load="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" virtio_blk_load="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" if_vtnet_load="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" virtio_balloon_load="YES"
	##### etc
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" linux_enable="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" timed_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" update_motd="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" virecover_enable="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" rsyncd_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" ftp_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" tcp_extensions="YES"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" ppp_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" pppoed_enable="NO"
	/usr/sbin/sysrc -f "${1}/etc/rc.conf" local_enable="YES"

	fi

}

# ---------------------------------------------------------

# nat AND create
jrolenatcreate (){

	testforx /usr/local/bin/ezjail-admin

	[ $# -lt 3 ] && echo "Usage: `basename $0` role jailname 'nic|ip'" && exit 1

	jrolenat			"$1" "$2" "$3"

	# If jail doesn't exist
	if ! /usr/local/bin/ezjail-admin list | /usr/bin/grep "$2" > /dev/null 2> /dev/null ; then
		jrolecreate	"$1" "$2" "$3"
	fi

}

# ---------------------------------------------------------

# nat AND start
jrolenatstart (){
	[ $# -lt 3 ] && echo "Usage: `basename $0` role jailname 'nic|ip'" && exit 1
	jrolenat     "$1" "$2" "$3"
	jrolestart   "$1" "$2" "$3"
}

# ---------------------------------------------------------

# Calls jrolecreate, and then jrolebgstart
jrolestart (){
	[ $# -lt 3 ] && echo "Usage: `basename $0` role jailname 'nic|ip'" && exit 1
	jrolecreate  "$1" "$2" "$3"
	jrolebgstart "$1" "$2"
}

# ---------------------------------------------------------

# Send jail to another server
jrolesendjail () {

	[ $# -lt 2 ] && echo "Usage: `basename $0` jailname host:port" && exit 1

	testforx /server/bin/zfssend

	# Snapshot timestamp
	local timestamp=$( /bin/date '+%Y%m%dT%H%M%S%Z' )

	local safejailname=$( echo -n "$1" | /usr/bin/tr -c '[:alnum:]' _ )

	local jailip=$( /usr/local/bin/ezjail-admin list | /usr/bin/grep "$1" |\
		/usr/bin/awk '{print $2}' )

	# Parse $2 for REMOTE_HOST and REMOTE_PORT
	local REMOTE_HOST=$( getremotehost "$2" )
	local REMOTE_PORT=$( getremoteport "$2" )
	local REMOTE_CONNECTION="/usr/bin/ssh -p $REMOTE_PORT $REMOTE_HOST"

	# Catch unknown host key
	if ! $REMOTE_CONNECTION echo ; then
		exit 1
	fi

	if /sbin/zfs list "data/ezjail/$1" ; then

		# Send jail filesystem
		/sbin/zfs snapshot	"data/ezjail/${1}@$timestamp"

		/server/bin/zfssend	"data/ezjail/${1}@$timestamp"	"$2"	data || exit 1

		$REMOTE_CONNECTION /sbin/zfs mount "data/ezjail/$1"

		# Notify how to restore
		/bin/cat <<EOF
ON THE REMOTE SYSTEM, YOU CAN RESTORE THE JAIL WITH:
	ezjail-admin onestart $1
EOF

	else

		testforx /usr/local/bin/ezjail-admin

		# Send jail archive
		/usr/local/bin/ezjail-admin onestop		"$1"
		/usr/local/bin/ezjail-admin archive 	"$1"
		/usr/local/bin/ezjail-admin onestart	"$1"

		local thisarchive=$( /bin/ls -1tr "/usr/jails/ezjail_archives/${safejailname}*" |\
			/usr/bin/tail -1 )

		$REMOTE_CONNECTION /bin/mkdir -p	/usr/jails/ezjail_archives

		/usr/bin/scp -P $REMOTE_PORT "$thisarchive" "${REMOTE_HOST}:${thisarchive}"

		/bin/cat <<EOF
ON THE REMOTE SYSTEM, RECREATE THE JAIL:
	ezjail-admin create -a $thisarchive $1 $jailip
	ezjail-admin onestart $1
EOF

	fi

	# Send jail fstab
	/usr/bin/scp -P $REMOTE_PORT "/usr/local/etc/ezjail/fstab.$safejailname" \
	"${REMOTE_HOST}:/usr/local/etc/ezjail/"

	# Send jail options
	$REMOTE_CONNECTION /bin/mkdir -p	/usr/local/etc/ezjail

	/usr/bin/scp -P $REMOTE_PORT		"/usr/local/etc/ezjail/$safejailname" \
	"${REMOTE_HOST}:/usr/local/etc/ezjail/"

}

# ---------------------------------------------------------

# Send old data to another server
jrolesenddata () {

	[ $# -lt 2 ] && echo "Usage: `basename $0` role host:port" && exit 1

	testforx /server/bin/zfssend

	# Snapshot timestamp
	local timestamp=$( /bin/date '+%Y%m%dT%H%M%S%Z' )

	# Parse $2 for REMOTE_HOST and REMOTE_PORT
	local REMOTE_HOST=$( getremotehost "$2" )
	local REMOTE_PORT=$( getremoteport "$2" )
	local REMOTE_CONNECTION="/usr/bin/ssh -p $REMOTE_PORT $REMOTE_HOST"

	# Catch unknown host key
	if ! $REMOTE_CONNECTION echo ; then
		exit 1
	fi

	if [ "$1" = "poudriere" ]; then

		/sbin/zfs snapshot	-r	"data/distfiles@$timestamp"

		/server/bin/zfssend			"data/distfiles@$timestamp"				"$2"	data || exit 1

		$REMOTE_CONNECTION zfs mount data/distfiles

		/sbin/zfs snapshot	-r	"data/poudriere/data@$timestamp"

		/server/bin/zfssend			"data/poudriere/data@$timestamp"	"$2"	data || exit 1

		$REMOTE_CONNECTION zfs mount data/poudriere/data

	elif [ "$1" = "pxe" ]; then

		/sbin/zfs snapshot	-r	"data/distro@$timestamp"

		/server/bin/zfssend			"data/distro@$timestamp"					"$2"	data || exit 1

		$REMOTE_CONNECTION zfs mount data/distro

	else

		echo "Not implemented" ; exit 1

	fi

}

# ---------------------------------------------------------

jrolealljails () {
	jrolejails dhcpd "$1"
	jrolejails pxe "$1"
	jrolejails consul "$1"
	jrolejails log "$1"
	jrolejails ldap "$1"
	jrolejails git "$1"
	jrolejails mysql "$1"
	jrolejails pgsql "$1"
	jrolejails riak "$1"
	jrolejails couchdb "$1"
	jrolejails cassandra "$1"
	jrolejails mail "$1"
	jrolejails odoo "$1"
	jrolejails ssl "$1"
	jrolejails littlechef "$1"
}

# ---------------------------------------------------------

# Create jails
jrolejails () {
	if [ "dhcpd" = "$1" ]; then
		IPCOUNT=$(( IPCOUNT + 1 ))						# Global vars for ipcount
		DHCP="${IP}.${IPCOUNT}"	# Global vars for duration of script run for setting firewall
		jrolejailsgeneric "$1"						"lanctl.local"	"${NIC}|${IP}.${IPCOUNT}"			"$2"
		jrolejails pxe "$2"
	elif [ "pxe" = "$1" ]; then
		jrolejailsgeneric "$1"						"lanctl.local"	"${LOCALNIC}|${LOCALIP}.2"		"$2"
		jrolejailsgeneric "pkgng"					"lanctl.local"	"${LOCALNIC}|${LOCALIP}.3"		"$2"
		jrolejailsgeneric "freebsd-dist"	"lanctl.local"	"${LOCALNIC}|${LOCALIP}.4"		"$2"
	elif [ "consul" = "$1" ]; then
		jrolejailsgeneric "$1"						"lanctl.local"	"${LOCALNIC}|${LOCALIP}.5"		"$2"
	elif [ "log" = "$1" ]; then
		jrolejailsgeneric "$1"						"lanctl.local"	"${LOCALNIC}|${LOCALIP}.6"		"$2"
	elif [ "ldap" = "$1" ]; then
		jrolejailsgeneric "$1"						"lanctl.local"	"${LOCALNIC}|${LOCALIP}.7"		"$2"
	elif [ "git" = "$1" ]; then
		jrolejailsgeneric "$1"						"data.local"		"${LOCALNIC}|${LOCALIP}.8"		"$2"
	elif [ "mysql" = "$1" ]; then
		jrolejailsgeneric "$1"						"data.local"		"${LOCALNIC}|${LOCALIP}.9"		"$2"
	elif [ "pgsql" = "$1" ]; then
		jrolejailsgeneric "$1"						"data.local"		"${LOCALNIC}|${LOCALIP}.10"		"$2"
	elif [ "riak" = "$1" ]; then
		jrolejailsgeneric "$1"						"data.local"		"${LOCALNIC}|${LOCALIP}.11"		"$2"
	elif [ "couchdb" = "$1" ]; then
		jrolejailsgeneric "$1"						"data.local"		"${LOCALNIC}|${LOCALIP}.12"		"$2"
	elif [ "cassandra" = "$1" ]; then
		jrolejailsgeneric "$1"						"data.local"		"${LOCALNIC}|${LOCALIP}.13"		"$2"
	elif [ "mail" = "$1" ]; then
		jrolejailsgeneric "postfix"				"mail.local"		"${LOCALNIC}|${LOCALIP}.14"		"$2"
		jrolejails mysql
		jrolejailsgeneric "dbmail"				"mail.local"		"${LOCALNIC}|${LOCALIP}.15"		"$2"
		jrolejailsgeneric "horde"					"app.local"			"${LOCALNIC}|${LOCALIP}.16"		"$2"
	elif [ "odoo" = "$1" ]; then
		jrolejails mysql
		jrolejailsgeneric "$1"						"app.local"			"${LOCALNIC}|${LOCALIP}.17"		"$2"
	elif [ "ssl" = "$1" ]; then
		jrolejailsgeneric "$1"						"secure.local"	"${LOCALNIC}|${LOCALIP}.18"		"$2"

	elif [ "littlechef" = "$1" ]; then
		jrolejailsgeneric "$1"						"lanctl.local"	"${LOCALNIC}|${LOCALIP}.250"	"$2"
	elif [ "release" = "$1" ]; then
		jrolejailsgeneric "$1"						"builder.local"	"${LOCALNIC}|${LOCALIP}.251"	"$2"
	elif [ "mfsbsd" = "$1" ]; then
		jrolejailsgeneric "$1"						"builder.local"	"${LOCALNIC}|${LOCALIP}.252"	"$2"
	fi
}

# ---------------------------------------------------------

# Create jails
jrolejailsgeneric () {

	[ $# -lt 3 ] && echo "Usage: `basename $0` role domain IP [clean|remove|delete|destroy|reinstall]" && exit 1

	case "$4" in
		clean|remove|delete|destroy|reinstall)
			jroledestroyboth "$1" "${1}.$2" ;;
	esac

	case "$4" in
		clean|remove|delete|destroy) return ;;
	esac

	jrolesetupbasejail

	jrolenatcreate "$1" "${1}.$2" "$3"

	case "$4" in
		nostart) return 0 ;;
	esac

	jrolebgstart "$1" "${1}.$2"

}

# ---------------------------------------------------------

# Destroy flavour
jroledestroyflavour (){
	[ $# -lt 1 ] && echo "Usage: `basename $0` role" && exit 1
	if [ "x" != "x$1" ]; then
		/bin/rm -r "/usr/jails/flavours/$1"
	fi
}

# ---------------------------------------------------------

# Destroy jail
jroledestroyjail (){

	[ $# -lt 1 ] && echo "Usage: `basename $0` jailname" && exit 1

	testforx /usr/local/bin/ezjail-admin

	if [ "x" != "x$1" ]; then
		/usr/local/bin/ezjail-admin onestop   "$1"
		/usr/local/bin/ezjail-admin delete -w "$1"
		sleep 5
		/sbin/umount "/usr/jails/$1"
		/bin/rm -r "/usr/jails/$1"
		/sbin/zfs destroy -f "data/ezjail/$1"
	fi

}

# ---------------------------------------------------------

# Destroy jail and flavour
jroledestroyboth () {
	[ $# -lt 2 ] && echo "Usage: `basename $0` role jailname" && exit 1
	if [ "x" != "x$1" -a "x" != "x$2" ]; then
		echo	jroledestroyjail "$2"
					jroledestroyjail "$2"
		echo	jroledestroyflavour "$1"
					jroledestroyflavour "$1"
	fi
}

# ---------------------------------------------------------

# Recover from USB, args: either dhcpd or pxe
jrolerecover () {

	[ $# -lt 1 ] && echo "Usage: `basename $0` dhcpd|pxe" && exit 1

	testforx /usr/local/bin/ezjail-admin

	if 						/bin/ls -1 /bootdir/*.csv > /dev/null 2> /dev/null ; then
		for i in $( /bin/ls -1 /bootdir/*.csv ); do
			/bin/cp -av "$i" /server/csv/dhcpd/ || exit 1
		done
	fi

	# Create lan control jails
	if [ "dhcp" = "$1" -o "dhcpd" = "$1" ]; then
		jrolejails dhcpd nostart
	else
		jrolejails pxe nostart
	fi

	# Copy USB media
	jrolelinkmedia

	# Bootstrap pkgng jail
	local pkgjailname=$( /usr/local/bin/ezjail-admin list \
	| /usr/bin/grep "pkgng" | /usr/bin/awk '{print $4}' )

	local pkgfile=$( /usr/local/bin/ezjail-admin console \
	-e 'find /server/www/pkgng' "$pkgjailname" | /usr/bin/grep "openssl-.*txz" )

	/usr/local/bin/ezjail-admin console -e "pkg-static add $pkgfile" "$pkgjailname"
	local pkgfile=$( /usr/local/bin/ezjail-admin console \
	-e 'find /server/www/pkgng' "$pkgjailname" | /usr/bin/grep "pcre-.*txz" )

	/usr/local/bin/ezjail-admin console -e "pkg-static add $pkgfile" "$pkgjailname"
	local pkgfile=$( /usr/local/bin/ezjail-admin console \
	-e 'find /server/www/pkgng' "$pkgjailname" | /usr/bin/grep "nginx-.*txz" )

	/usr/local/bin/ezjail-admin console -e "pkg-static add $pkgfile" "$pkgjailname"
	local pkgfile=$( /usr/local/bin/ezjail-admin console \
	-e 'find /server/www/pkgng' "$pkgjailname" | /usr/bin/grep "pkg-.*txz" )

	/usr/local/bin/ezjail-admin console -e "pkg-static add $pkgfile" "$pkgjailname"

	jrolebgstart "pkgng" "$pkgjailname"

	# Start freebsd-dist jail
	jrolebgstart "freebsd-dist" $( /usr/local/bin/ezjail-admin list \
	| /usr/bin/grep "freebsd-dist" | /usr/bin/awk '{print $4}' )

	# Start pxe jail
	jrolebgstart "pxe" $( /usr/local/bin/ezjail-admin list \
	| /usr/bin/grep "pxe" | /usr/bin/awk '{print $4}' )

	# Start dhcpd jail, if required
	if [ "dhcp" = "$1" -o "dhcpd" = "$1" ]; then
		jrolebgstart "dhcpd" $( /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "dhcpd" | /usr/bin/awk '{print $4}' )
	fi

}

# ---------------------------------------------------------

# Copy /var/backups/10.0-RELEASE/base.txz and other to freebsd-dist, /packages to pkgng,
# and NOX.tar to freebsd-dist
jrolelinkmedia () {

	testforx /usr/local/sbin/pkg-static

	local releasedir=$( /usr/bin/find "/var/backups" -name "base.txz" \
	| /usr/bin/head -1 )

	local distdir=$( /usr/bin/find \
	/usr/jails/freebsd-dist*/server/www -name "freebsd-dist" \
	| /usr/bin/head -1 )

	if [ "x" != "x$releasedir" -a "x" != "x$distdir" ]; then

		# Copy to freebsd-dist jail
		/server/bin/r -tcW --exclude '*.sig' \
		"${releasedir%/*}/" \
		"${distdir}/${RELEASE}-${ARCH}/" \
		|| exit 1

		# Set soft link like ftp server
		/bin/ln -shf \
		"/server/www/freebsd-dist/${RELEASE}-${ARCH}" \
		"${distdir}/${RELEASE}-${ARCH}/FreeBSD"

		/bin/ln -shf \
		"/server/www/freebsd-dist/${RELEASE}-${ARCH}" \
		"${distdir}/${RELEASE}-${ARCH}/releases"

		/bin/ln -shf \
		"/server/www/freebsd-dist/${RELEASE}-${ARCH}" \
		"${distdir}/${RELEASE}-${ARCH}/${ARCH}"

		/bin/ln -shf \
		"/server/www/freebsd-dist/${RELEASE}-${ARCH}" \
		"${distdir}/${RELEASE}-${ARCH}/${RELEASE}"

	fi

	if [ "x" != "x$distdir" ]; then

		# Set permissions so nginx can serve
		nginxrootpermissions "$distdir"

		# Change IP for freebsd-dist
		jroleproductionip $( /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "freebsd-dist" | /usr/bin/awk '{print $4}' )

	fi

	# Restore NOX*.tar too
	local releasedir=$( /usr/bin/find /var/backups -name 'NOX*tar' | /usr/bin/head -1 )

	local distdir=$( /usr/bin/find /usr/jails/freebsd-dist*/server/www -name "mfsbsd" \
	| /usr/bin/head -1 )

	if [ "x" != "x$releasedir" -a "x" != "x$distdir" ]; then
		/bin/mkdir -p "${distdir}/${RELEASE}-${ARCH}"
		/server/bin/r -tcW "${releasedir}"		"${distdir}/${RELEASE}-${ARCH}/" \
		|| exit 1
	fi

	if [ "x" != "x$distdir" ]; then
		# Set permissions so nginx can serve
		nginxrootpermissions "$distdir"
	fi

	# Restore pkgdisk too
	local releasedir="/var/backups/pkgdisk"

	local distdir=$( /usr/bin/find /usr/jails/pkgng*/server/www -name "pkgng" \
	| /usr/bin/head -1 )

	if [ "x" != "x$releasedir" -a "x" != "x$distdir" ]; then
		mkdir -p "${distdir}/All"
		echo "/server/bin/r -tcW  ${releasedir}/   ${distdir}/All/"
					/server/bin/r -tcW "${releasedir}/" "${distdir}/All/" \
					|| exit 1
	fi

	# Restore /packages too
	local releasedir="/packages"

	if [ "x" != "x$releasedir" -a "x" != "x$distdir" ]; then

		mkdir -p "${distdir}/All"

		echo "/server/bin/r -tcW --exclude noauto  ${releasedir}/   ${distdir}/All/"
					/server/bin/r -tcW --exclude noauto "${releasedir}/" "${distdir}/All/" \
					|| exit 1

		if [ -e "${releasedir%/*}/noauto" ]; then
			echo "/server/bin/r -tcW  ${releasedir}/noauto/   ${distdir}/All/"
						/server/bin/r -tcW "${releasedir}/noauto/" "${distdir}/All/" \
						|| exit 1
		fi

		# Create repo
		cd "${distdir}/" ; /usr/local/sbin/pkg-static repo ./ ; cd -

	fi

	if [ "x" != "x$distdir" ]; then

		# Set permissions so nginx can serve
		nginxrootpermissions "$distdir"

		# Change IP for pkgng
		jroleproductionip $( /usr/local/bin/ezjail-admin list | /usr/bin/grep "pkgng" \
		| /usr/bin/awk '{print $4}' )

	fi

}

# ---------------------------------------------------------

jrolelinksrc () {

	testforx /server/bin/r

	/sbin/zfs list data/distro/releng10 \
	&& /sbin/zfs mount data/distro/releng10

	/sbin/zfs list data/distro/gitreleng10 \
	&&  /sbin/zfs mount data/distro/gitreleng10

	if [ -e /server/tftp/distro/releng10 ]; then

		if [ -e /server/tftp/distro/gitreleng10 -a "yes" = "$INTERACTIVE" ]; then

			/usr/bin/diff -r -x .git -x .svn \
			/server/tftp/distro/releng10/ \
			/server/tftp/distro/gitreleng10/ | /server/bin/less

			echo "Press Enter to continue or ^C to abort."
			read oktogo

		fi

		/server/bin/r -lc --delete --exclude .svn --exclude svn.core \
		/server/tftp/distro/releng10/ \
		"${BASEJAIL}/usr/src/" \
		|| exit 1

	elif [ -e /server/tftp/distro/gitreleng10 ]; then
		/server/bin/r -lc --delete --exclude .git --exclude svn.core \
		/server/tftp/distro/gitreleng10/ \
		"${BASEJAIL}/usr/src/" \
		|| exit 1
	else
		if ! /usr/bin/egrep 'sm_close_on_exec\(lowest' "${BASEJAIL}/usr/src/contrib/sendmail/src/conf.c" > /dev/null 2> /dev/null ; then
			#/server/bin/aslr-patch
			/usr/bin/patch -Np1 -d "${BASEJAIL}/usr/src" \
			< /server/aslr/randomize-stack-and-mmap.bin
		fi
	fi

	/bin/cp \
	/server/release/release2.sh \
	"${BASEJAIL}/usr/src/release/release2.sh"

	/bin/cp \
	/server/release/BIGNKPT \
	"${BASEJAIL}/usr/src/sys/amd64/conf/BIGNKPT"

	/bin/cp \
	/server/release/src.conf \
	"${1}/etc/src.conf"

	/bin/cp \
	/server/release/release.conf \
	"${1}/release.conf"

	/usr/bin/egrep "DOPENSSL_NO_HEARTBEATS"	"${1}/etc/make.conf" \
	> /dev/null 2> /dev/null \
	|| /bin/cat >> "${1}/etc/make.conf" <<EOF
CFLAGS+=-DOPENSSL_NO_HEARTBEATS
#CFLAGS=    -O3 -pipe -fno-strict-aliasing -fstack-protector # -fPIE -pie -fPIC
#COPTFLAGS= -O3 -pipe -fno-strict-aliasing -fstack-protector # -fPIE -pie -fPIC
#CXXFLAGS+= -O3 -pipe -fno-strict-aliasing -fstack-protector # -fPIE -pie -fPIC
#KERNCONF= BIGNKPT
#CPUTYPE?= nocona
#OPTIMIZED_CFLAGS= YES
#BUILD_OPTIMIZED= YES
#WITH_CPUFLAGS= YES
#WITH_OPTIMIZED_CFLAGS= YES
#BUILD_STATIC= YES
#CC= clang
#CXX= clang++
#CPP= clang-cpp
EOF

}

# ---------------------------------------------------------

# Copy base.txz and other to freebsd-dist
jrolelinkrelease () {

	testforx /server/bin/r

	local releasedir=$( /usr/bin/find \
	/usr/jails/release*/scratch/R -name ftp \
	| /usr/bin/head -1 )

	local distdir=$( /usr/bin/find \
	/usr/jails/freebsd-dist*/server/www -name "freebsd-dist" \
	| /usr/bin/head -1 )

	if [ "x" != "x$releasedir" -a "x" != "x$distdir" ]; then

		# Copy to freebsd-dist jail
		/server/bin/r -tcW "${releasedir}/" "${distdir}/${RELEASE}-${ARCH}/" \
		|| exit 1

		# Set soft link like ftp server
		/bin/ln -shf \
		"/server/www/freebsd-dist/${RELEASE}-${ARCH}" \
		"${distdir}/${RELEASE}-${ARCH}/FreeBSD"

		/bin/ln -shf \
		"/server/www/freebsd-dist/${RELEASE}-${ARCH}" \
		"${distdir}/${RELEASE}-${ARCH}/releases"

		/bin/ln -shf \
		"/server/www/freebsd-dist/${RELEASE}-${ARCH}" \
		"${distdir}/${RELEASE}-${ARCH}/${ARCH}"

		/bin/ln -shf \
		"/server/www/freebsd-dist/${RELEASE}-${ARCH}" \
		"${distdir}/${RELEASE}-${ARCH}/${RELEASE}"

	fi

	if [ "x" != "x$distdir" ]; then

		# Set permissions so nginx can serve
		nginxrootpermissions "$distdir"

		# Change IP for freebsd-dist
		jroleproductionip $( /usr/local/bin/ezjail-admin list \
		| /usr/bin/grep "freebsd-dist" | /usr/bin/awk '{print $4}' )

	fi

}

# ---------------------------------------------------------

# Copy mfsbsd image to pxe and freebsd-dist
jrolelinkmfsbsd () {

	testforx /server/bin/r

	# Find iso and pxe jail
	local releasedir=$( /usr/bin/find \
	/usr/jails/mfsbsd*/root/mfsbsd -name 'NOX*iso' \
	| /usr/bin/head -1 )

	local distdir=$(    /usr/bin/find \
	/usr/jails/pxe*/server -name "tftp" \
	| /usr/bin/head -1 )

	# Copy to pxe jail
	if [ "x" != "x$releasedir" -a "x" != "x$distdir" ]; then

		/usr/bin/install -d -m 555 -o nobody -g wheel "${distdir}/distro/mfsbsd"

		/server/bin/r -tcW "${releasedir}"		"${distdir}/distro/mfsbsd/mfsbsd.iso" \
		|| exit 1

		/usr/sbin/chown nobody:wheel "${distdir}/distro/mfsbsd/mfsbsd.iso"
		/bin/chmod -h 444 "${distdir}/distro/mfsbsd/mfsbsd.iso"

	fi

	# Copy to freebsd-dist jail
	local distdir=$( /usr/bin/find /usr/jails/freebsd-dist*/server/www -name "mfsbsd" \
	| /usr/bin/head -1 )

	if [ "x" != "x$releasedir" -a "x" != "x$distdir" ]; then
		/server/bin/r -tcW "${releasedir%/*}"/NOX*	"${distdir}/${RELEASE}-${ARCH}/" \
		|| exit 1
	fi

	if [ "x" != "x$distdir" ]; then
		# Set permissions so nginx can serve
		nginxrootpermissions "$distdir"
	fi

}

# ---------------------------------------------------------

# Copy packages from poudriere to pkgng jail's /server/www/pkgng using rsync
jrolelinkpkgng () {

	testforx /server/bin/r

	local releasedir=$( /usr/bin/find \
	"${POUDIR}/data/packages" -name All -type d  \
	| /usr/bin/head -1 )

	local distdir=$(    /usr/bin/find \
	/usr/jails/pkgng*/server/www -name "pkgng" \
	| /usr/bin/head -1 )

	if [ "x" != "x$releasedir" -a "x" != "x$distdir" ]; then

		# rsync
		echo "/server/bin/r -ltcW --delete  ${releasedir%/*}/   ${distdir}/"
					/server/bin/r -ltcW --delete "${releasedir%/*}/" "${distdir}/" \
					|| exit 1

		# Create repo
#		cd "${distdir}/" ; /usr/local/sbin/pkg-static repo ./ ; cd -

	fi

	if [ "x" != "x$distdir" ]; then

		# Set permissions so nginx can serve
		nginxrootpermissions "$distdir"

		# Change IP for pkgng
		jroleproductionip $( /usr/local/bin/ezjail-admin list | /usr/bin/grep "pkgng" \
		| /usr/bin/awk '{print $4}' )

	fi

}

# ---------------------------------------------------------

# Turns ip in ezjail's jail config from 10.123.234.X to 10.7.7.X
jroleproductionip () {

	[ $# -lt 1 ] && echo "Usage: `basename $0` jailname" && exit 1

	testforx /usr/local/bin/ezjail-admin

	local safejailname=$( echo -n "$1" | /usr/bin/tr -c '[:alnum:]' _ )

	# now stop and switch ip from 10.123.234 to 10.7.7
	local oldip=$( /usr/local/bin/ezjail-admin list \
	| /usr/bin/grep "/usr/jails/$1" | /usr/bin/awk '{print $3}' )

	local newip="${PRODIP}.${oldip##*.}"

	if echo "$oldip" | /usr/bin/grep "$LOCALIP" > /dev/null 2> /dev/null ; then

		/bin/cat >> "/usr/local/etc/ezjail/$safejailname" <<EOF
export jail_${safejailname}_ip="${LOCALNIC}|$newip"
EOF

		/usr/local/bin/ezjail-admin onestop  "$1"
		/usr/local/bin/ezjail-admin onestart "$1"

	fi

	# Startucarp will detect if all jails running, then run ucarp
	test -x /server/bin/startucarp \
	&& /server/bin/startucarp

}

# ---------------------------------------------------------

# Test for execute bit on file, or exit 1
testforx (){
	[ $# -lt 1 ] && echo "Usage: `basename $0` file" && exit 1
	if [ ! -x "$1" ]; then
		echo "Error: $1 not found or executable"; exit 1
	fi
}

# ---------------------------------------------------------

# Set permissions so nginx can serve
nginxrootpermissions (){
	[ $# -lt 1 ] && echo "Usage: `basename $0` path" && exit 1
	/usr/bin/find "$1" -type l -exec /bin/chmod -h 755 {} \;
	/usr/bin/find "$1" -type d -exec /bin/chmod    755 {} \;
	/usr/bin/find "$1" -type f -exec /bin/chmod    644 {} \;
}

# ---------------------------------------------------------

# Parse $1 for REMOTE_HOST
getremotehost (){
	[ $# -lt 1 ] && echo "Usage: `basename $0` 'host:port'" && exit 1
	if echo "$1" | /usr/bin/grep ':' > /dev/null 2> /dev/null ; then
		echo $( echo "$1" | /usr/bin/cut -d: -f1 )
	else
		echo "$1"
	fi
}
# ---------------------------------------------------------

# Parse $1 for REMOTE_HOST
getremoteport (){
	[ $# -lt 1 ] && echo "Usage: `basename $0` 'host:port'" && exit 1
	if echo "$1" | /usr/bin/grep ':' > /dev/null 2> /dev/null ; then
		echo $( echo "$1" | /usr/bin/cut -d: -f2 )
	else
		echo 22
	fi
}

# ---------------------------------------------------------

# Creates the auto_links giving the user new functionallity from the
# command line. Creates link files to this script.
make_auto_links (){

	# "() {" are     published functions of this script.
	# "(){"  are not published functions of this script.
	local thisfile=`/usr/bin/basename $0`

	# But only the jrole functions
	for var in $( /usr/bin/grep "() {" "$0" \
	| /usr/bin/grep "^jrole" | /usr/bin/cut -d' ' -f1 ) ; do

		/bin/ln -shf "$thisfile"	"/server/bin/$var" 2>/dev/null

	done

}

# ---------------------------------------------------------

# If a link is used, run the proper function, else give info about
# how to work with this script and functions.
if [ -L /server/bin/`/usr/bin/basename $0` ] ; then
	`/usr/bin/basename $0` $*
else

	echo "Usage: Please use the created links to `/usr/bin/basename $0` in this \
directory to use the functionality. If this is your first run, some scripts have \
been created in /server/bin for you." && { make_auto_links ; exit 1 ; }

fi

# Delete the tmpfile
if [ -e "$TMPFILE" ]; then
	/bin/rm "$TMPFILE"
fi
